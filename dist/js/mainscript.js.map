{"version":3,"file":"mainscript.js","sources":["../../sources/js/api/MapGeoJson.js","../../sources/js/modules/MapLeaflet.js","../../sources/js/front.js"],"sourcesContent":["const MapGeoJsonConect = async(url)=>{\r\n    const fetchGeoJson = await fetch(url);\r\n    const dataToJson = await fetchGeoJson.json();\r\n\r\n    return dataToJson;\r\n}\r\n\r\nexport default MapGeoJsonConect;","import conectApi from '../api/MapGeoJson';\n\nconst Map = (()=>{\n\n    const _MapConfig = async (dinamicGeoJson, lat = 0, lng = 0, zoom = 0)=>{\n\n        // Function for paint map\n        function style(feature) {\n            const { population } = feature.properties;\n            return {\n                fillColor: getColor(population),\n                weight: 1,\n                opacity: 1,\n                color: 'white',\n                dashArray: '1',\n                fillOpacity: 0.9\n            };\n        }\n\n        // Get color according to population\n        function getColor(population) {\n            return population > 60000000 ? '#800026' :\n                population > 50000000 ? '#BD0026' :\n                population > 40000000 ? '#002345' :\n                '#002345';\n        }\n\n        // Create map + coords + zoom\n        const map = L.map('map',{\n            center: [lat, lng],\n            zoom: zoom,\n            minZoom: 2 \n        }); // Coordenadas iniciales y nivel de zoom\n\n        // Add map cap\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(map);\n\n        // Add cap and aply styles\n        const geojsonLayer = await L.geoJson(dinamicGeoJson, { style }).addTo(map);\n\n        // Info control personality\n        const infoControl = await L.control();\n\n        //Create template\n        infoControl.onAdd = function(map) {\n            this._div = L.DomUtil.create('div', 'info-control');\n            this.update();\n            return this._div;\n        };\n\n        //Method for update info control\n        infoControl.update = function(props) {\n            this._div.innerHTML = props ?\n                `<strong>${props.ADMIN ? props.ADMIN : props.NOMBRE_DPT}</strong><br>Población:${props.population}` :\n                'Pasa el cursor sobre un área';\n        };\n\n        //Add to map info control\n        await infoControl.addTo(map);\n\n        // Add popups depending on the population of each country\n        geojsonLayer.eachLayer(function(layer) {\n            const { population, ADMIN, NOMBRE_DPT } = layer.feature.properties;   \n\n            //Update in real time data of countries\n            layer.on('mouseover', function(e) {\n                const props = e.target.feature.properties;\n                infoControl.update(props);\n            });\n            layer.on('mouseout', function() {\n                infoControl.update();\n            });\n\n            // Open popup\n            layer.bindPopup(`<strong>${ADMIN ? ADMIN : NOMBRE_DPT}</strong><br>Población:${population}`);\n        });\n    }\n\n    /*\n    *Enable map\n    */\n    const _MapEnableHome = ()=>{\n        const getLegend = document.querySelector('.map__legend');\n        conectApi('./lib/countries.geojson')\n            .then((data)=>{\n                setTimeout(()=>{\n                    getLegend.classList.add('active');\n                    _MapConfig(data);\n                },1000);\n            });\n    }\n\n\n    /*\n    *Return child functions in a objects\n    */\n    return{\n        setHandleEvent: function(){\n            try { _MapEnableHome(); } catch (error) { console.log(error) }\n        },\n    }\n})();\n\n/*\n*Load global functions\n*/\nconst loadMapHandlers = ()=>{\n    Map.setHandleEvent();\n}\n\nexport { loadMapHandlers }","//COMPONENTS\nimport { loadMapHandlers } from \"./modules/MapLeaflet\";\nimport \"../sass/main.scss\";\n\nwindow.addEventListener('load', ()=>{\n    loadMapHandlers();\n});"],"names":["require_mainscript","__commonJSMin","exports","MapGeoJsonConect","url","__async","Map","_MapConfig","dinamicGeoJson","lat","lng","zoom","style","feature","population","getColor","map","geojsonLayer","infoControl","props","layer","ADMIN","NOMBRE_DPT","e","_MapEnableHome","getLegend","conectApi","data","error","loadMapHandlers"],"mappings":";;;;;;;;;;;;;;;;;AAAA,IAAAA,IAAAC,EAAA,CAAAC,MAAA;AAAA,QAAMC,IAAmB,CAAMC,MAAMC,EAAAH,GAAA;AAIjC,WAFmB,OADE,MAAM,MAAME,CAAG,GACE;EAG1C,ICHME,KAAO,MAAI;AAEb,UAAMC,IAAa,CAAOC,GAAgBC,IAAM,GAAGC,IAAM,GAAGC,IAAO,MAAIN,EAAAH,GAAA;AAGnE,eAASU,EAAMC,GAAS;AACpB,cAAM,EAAE,YAAAC,EAAU,IAAKD,EAAQ;AAC/B,eAAO;AAAA,UACH,WAAWE,EAASD,CAAU;AAAA,UAC9B,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,OAAO;AAAA,UACP,WAAW;AAAA,UACX,aAAa;AAAA,QAC7B;AAAA,MACS;AAGD,eAASC,EAASD,GAAY;AAC1B,eAAOA,IAAa,MAAW,YAC3BA,IAAa,MAAW,aACxBA,IAAa,KAAW;AAAA,MAE/B;AAGD,YAAME,IAAM,EAAE,IAAI,OAAM;AAAA,QACpB,QAAQ,CAACP,GAAKC,CAAG;AAAA,QACjB,MAAMC;AAAA,QACN,SAAS;AAAA,MACrB,CAAS;AAGD,QAAE,UAAU,sDAAsD;AAAA,QAC9D,aAAa;AAAA,MACzB,CAAS,EAAE,MAAMK,CAAG;AAGZ,YAAMC,IAAe,MAAM,EAAE,QAAQT,GAAgB,EAAE,OAAAI,GAAO,EAAE,MAAMI,CAAG,GAGnEE,IAAc,MAAM,EAAE;AAG5B,MAAAA,EAAY,QAAQ,SAASF,GAAK;AAC9B,oBAAK,OAAO,EAAE,QAAQ,OAAO,OAAO,cAAc,GAClD,KAAK,OAAM,GACJ,KAAK;AAAA,MACxB,GAGQE,EAAY,SAAS,SAASC,GAAO;AACjC,aAAK,KAAK,YAAYA,IAClB,WAAWA,EAAM,QAAQA,EAAM,QAAQA,EAAM,uCAAoCA,EAAM,eACvF;AAAA,MAChB,GAGQ,MAAMD,EAAY,MAAMF,CAAG,GAG3BC,EAAa,UAAU,SAASG,GAAO;AACnC,cAAM,EAAE,YAAAN,GAAY,OAAAO,GAAO,YAAAC,EAAY,IAAGF,EAAM,QAAQ;AAGxD,QAAAA,EAAM,GAAG,aAAa,SAASG,GAAG;AAC9B,gBAAMJ,IAAQI,EAAE,OAAO,QAAQ;AAC/B,UAAAL,EAAY,OAAOC,CAAK;AAAA,QACxC,CAAa,GACDC,EAAM,GAAG,YAAY,WAAW;AAC5B,UAAAF,EAAY,OAAM;AAAA,QAClC,CAAa,GAGDE,EAAM,UAAU,WAAWC,KAAgBC,8BAAoCR,GAAY;AAAA,MACvG,CAAS;AAAA,IACJ,IAKKU,IAAiB,MAAI;AACvB,YAAMC,IAAY,SAAS,cAAc,cAAc;AACvDC,MAAAA,EAAU,yBAAyB,EAC9B,KAAK,CAACC,MAAO;AACV,mBAAW,MAAI;AACX,UAAAF,EAAU,UAAU,IAAI,QAAQ,GAChClB,EAAWoB,CAAI;AAAA,QAClB,GAAC,GAAI;AAAA,MACtB,CAAa;AAAA,IACR;AAMD,WAAM;AAAA,MACF,gBAAgB,WAAU;AACtB,YAAI;AAAE,UAAAH,EAAgB;AAAA,iBAAWI,GAAP;AAAgB,kBAAQ,IAAIA,CAAK;AAAA,QAAG;AAAA,MACjE;AAAA,IACJ;AAAA,EACL,MAKMC,IAAkB,MAAI;AACxB,IAAAvB,EAAI,eAAc;AAAA,EACtB;AC1GA,SAAO,iBAAiB,QAAQ,MAAI;AAChC,IAAAuB;EACJ,CAAC;AAAA;"}