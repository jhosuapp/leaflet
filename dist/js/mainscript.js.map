{"version":3,"file":"mainscript.js","sources":["../../sources/js/api/MapGeoJson.js","../../sources/js/modules/MapLeaflet.js","../../sources/js/front.js"],"sourcesContent":["const MapGeoJsonConect = async(url)=>{\r\n    const fetchGeoJson = await fetch(url);\r\n    const dataToJson = await fetchGeoJson.json();\r\n\r\n    return dataToJson;\r\n}\r\n\r\nexport default MapGeoJsonConect;","import conectApi from '../api/MapGeoJson';\r\n\r\nconst Map = (()=>{\r\n\r\n    const _MapConfig = async (dinamicGeoJson, lat = 0, lng = 0, zoom = 0)=>{\r\n\r\n        // Function for paint map\r\n        function style(feature) {\r\n            const { population } = feature.properties;\r\n            return {\r\n                fillColor: getColor(population),\r\n                weight: 1,\r\n                opacity: 1,\r\n                color: 'white',\r\n                dashArray: '1',\r\n                fillOpacity: 0.9\r\n            };\r\n        }\r\n\r\n        // Get color according to population\r\n        function getColor(population) {\r\n            return population > 60000000 ? '#800026' :\r\n                population > 50000000 ? '#BD0026' :\r\n                population > 40000000 ? '#002345' :\r\n                '#002345';\r\n        }\r\n\r\n        // Create map + coords + zoom\r\n        const map = L.map('map',{\r\n            center: [lat, lng],\r\n            zoom: zoom,\r\n            minZoom: 2 \r\n        }); // Coordenadas iniciales y nivel de zoom\r\n\r\n        // Add map cap\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        }).addTo(map);\r\n\r\n        // Add cap and aply styles\r\n        const geojsonLayer = await L.geoJson(dinamicGeoJson, { style }).addTo(map);\r\n\r\n        // Info control personality\r\n        const infoControl = await L.control();\r\n\r\n        //Create template\r\n        infoControl.onAdd = function(map) {\r\n            this._div = L.DomUtil.create('div', 'info-control');\r\n            this.update();\r\n            return this._div;\r\n        };\r\n\r\n        //Method for update info control\r\n        infoControl.update = function(props) {\r\n            this._div.innerHTML = props ?\r\n                `<strong>${props.name}</strong><br>Población:${props.population}` :\r\n                'Pasa el cursor sobre un área';\r\n        };\r\n\r\n        //Add to map info control\r\n        await infoControl.addTo(map);\r\n\r\n        // Add popups depending on the population of each country\r\n        geojsonLayer.eachLayer(function(layer) {\r\n            const { population, name } = layer.feature.properties;   \r\n\r\n            //Update in real time data of countries\r\n            layer.on('mouseover', function(e) {\r\n                const props = e.target.feature.properties;\r\n                infoControl.update(props);\r\n            });\r\n            layer.on('mouseout', function() {\r\n                infoControl.update();\r\n            });\r\n\r\n            // Open popup\r\n            layer.bindPopup(`<strong>${name}</strong><br>Población:${population}`);\r\n        });\r\n    }\r\n\r\n    /*\r\n    *Enable map\r\n    */\r\n    const _MapEnableHome = async()=>{\r\n        await conectApi('./lib/colombia-country.geojson')\r\n        .then((geoJson)=>{\r\n                console.log(geoJson);\r\n                //Add new parameter with hc-key\r\n                const { features } = geoJson;\r\n                features.forEach((getData)=>{\r\n                    const { properties } = getData;\r\n                    properties['hc-key'] = properties.region_code;\r\n                });\r\n                //Conect to Endpoint with data dinamic\r\n                conectApi('./lib/colombia-test-endpoint.json')\r\n                    .then((dataMap)=>{\r\n                            //Filter and compare data\r\n                            const arrayWithData = [];\r\n                            dataMap.forEach((regionEndpoint)=>{\r\n                                const { region_code:region_code_endpoint, name, population } = regionEndpoint;\r\n                                const { features } = geoJson;\r\n                                features.forEach((dataProperties)=>{\r\n                                    const { properties:{region_code}, properties } = dataProperties;\r\n                                    if(region_code_endpoint == region_code){\r\n                                        properties.name = name;\r\n                                        properties.population = population;\r\n                                    }\r\n                                });\r\n                                const createNewArr = [];\r\n                                createNewArr.push(region_code_endpoint, population);\r\n                                arrayWithData.push(createNewArr);\r\n                            });\r\n                            console.log(arrayWithData);\r\n                            //Compare region_code and asign values dinamics of endpoint\r\n                            _MapConfig(geoJson, 4.710989, -74.072092, 5, 5);\r\n                            //Remove loader\r\n                            getLoader.remove();\r\n                            getLegend.classList.add('active');\r\n                        }).catch((err)=>{\r\n                            console.log(err + 'second fetch');\r\n                        });\r\n\r\n        }).catch((err)=>{\r\n            console.log(err + 'fitst fetch');\r\n        });\r\n    }\r\n\r\n\r\n    /*\r\n    *Return child functions in a objects\r\n    */\r\n    return{\r\n        setHandleEvent: function(){\r\n            try { _MapEnableHome(); } catch (error) { console.log(error) }\r\n        },\r\n    }\r\n})();\r\n\r\n/*\r\n*Load global functions\r\n*/\r\nconst loadMapHandlers = ()=>{\r\n    Map.setHandleEvent();\r\n}\r\n\r\nexport { loadMapHandlers }","//COMPONENTS\r\nimport { loadMapHandlers } from \"./modules/MapLeaflet\";\r\nimport \"../sass/main.scss\";\r\n\r\nwindow.addEventListener('load', ()=>{\r\n    loadMapHandlers();\r\n});"],"names":["require_mainscript","__commonJSMin","exports","MapGeoJsonConect","url","__async","Map","_MapConfig","dinamicGeoJson","lat","lng","zoom","style","feature","population","getColor","map","geojsonLayer","infoControl","props","layer","name","e","_MapEnableHome","conectApi","geoJson","features","getData","properties","dataMap","arrayWithData","regionEndpoint","region_code_endpoint","dataProperties","region_code","createNewArr","err","error","loadMapHandlers"],"mappings":"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"}