{"version":3,"file":"mainscript.umd.cjs","sources":["../../sources/js/api/MapGeoJson.js","../../sources/js/modules/MapLeaflet.js","../../sources/js/front.js"],"sourcesContent":["const MapGeoJsonConect = async(url)=>{\r\n    const fetchGeoJson = await fetch(url);\r\n    const dataToJson = await fetchGeoJson.json();\r\n\r\n    return dataToJson;\r\n}\r\n\r\nexport default MapGeoJsonConect;","import conectApi from '../api/MapGeoJson';\r\n\r\nconst Map = (()=>{\r\n\r\n    const _MapConfig = async (dinamicGeoJson, lat = 0, lng = 0, zoom = 0)=>{\r\n\r\n        // Function for paint map\r\n        function style(feature) {\r\n            const { population } = feature.properties;\r\n            return {\r\n                fillColor: getColor(population),\r\n                weight: 1,\r\n                opacity: 1,\r\n                color: 'white',\r\n                dashArray: '1',\r\n                fillOpacity: 0.9\r\n            };\r\n        }\r\n\r\n        // Get color according to population\r\n        function getColor(population) {\r\n            return population > 60000000 ? '#800026' :\r\n                population > 50000000 ? '#BD0026' :\r\n                population > 40000000 ? '#002345' :\r\n                '#002345';\r\n        }\r\n\r\n        // Create map + coords + zoom\r\n        const map = L.map('map',{\r\n            center: [lat, lng],\r\n            zoom: zoom,\r\n            minZoom: 2 \r\n        }); // Coordenadas iniciales y nivel de zoom\r\n\r\n        // Add map cap\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        }).addTo(map);\r\n\r\n        // Add cap and aply styles\r\n        const geojsonLayer = await L.geoJson(dinamicGeoJson, { style }).addTo(map);\r\n\r\n        // Info control personality\r\n        const infoControl = await L.control();\r\n\r\n        //Create template\r\n        infoControl.onAdd = function(map) {\r\n            this._div = L.DomUtil.create('div', 'info-control');\r\n            this.update();\r\n            return this._div;\r\n        };\r\n\r\n        //Method for update info control\r\n        infoControl.update = function(props) {\r\n            this._div.innerHTML = props ?\r\n                `<strong>${props.name}</strong><br>Población:${props.population}` :\r\n                'Pasa el cursor sobre un área';\r\n        };\r\n\r\n        //Add to map info control\r\n        await infoControl.addTo(map);\r\n\r\n        // Add popups depending on the population of each country\r\n        geojsonLayer.eachLayer(function(layer) {\r\n            const { population, name } = layer.feature.properties;   \r\n\r\n            //Update in real time data of countries\r\n            layer.on('mouseover', function(e) {\r\n                const props = e.target.feature.properties;\r\n                infoControl.update(props);\r\n            });\r\n            layer.on('mouseout', function() {\r\n                infoControl.update();\r\n            });\r\n\r\n            // Open popup\r\n            layer.bindPopup(`<strong>${name}</strong><br>Población:${population}`);\r\n        });\r\n    }\r\n\r\n    /*\r\n    *Enable map\r\n    */\r\n    const _MapEnableHome = async()=>{\r\n        await conectApi('./lib/colombia-country.geojson')\r\n        .then((geoJson)=>{\r\n                console.log(geoJson);\r\n                //Add new parameter with hc-key\r\n                const { features } = geoJson;\r\n                features.forEach((getData)=>{\r\n                    const { properties } = getData;\r\n                    properties['hc-key'] = properties.region_code;\r\n                });\r\n                //Conect to Endpoint with data dinamic\r\n                conectApi('./lib/colombia-test-endpoint.json')\r\n                    .then((dataMap)=>{\r\n                            //Filter and compare data\r\n                            const arrayWithData = [];\r\n                            dataMap.forEach((regionEndpoint)=>{\r\n                                const { region_code:region_code_endpoint, name, population } = regionEndpoint;\r\n                                const { features } = geoJson;\r\n                                features.forEach((dataProperties)=>{\r\n                                    const { properties:{region_code}, properties } = dataProperties;\r\n                                    if(region_code_endpoint == region_code){\r\n                                        properties.name = name;\r\n                                        properties.population = population;\r\n                                    }\r\n                                });\r\n                                const createNewArr = [];\r\n                                createNewArr.push(region_code_endpoint, population);\r\n                                arrayWithData.push(createNewArr);\r\n                            });\r\n                            console.log(arrayWithData);\r\n                            //Compare region_code and asign values dinamics of endpoint\r\n                            _MapConfig(geoJson, 4.710989, -74.072092, 5, 5);\r\n                            //Remove loader\r\n                            getLoader.remove();\r\n                            getLegend.classList.add('active');\r\n                        }).catch((err)=>{\r\n                            console.log(err + 'second fetch');\r\n                        });\r\n\r\n        }).catch((err)=>{\r\n            console.log(err + 'fitst fetch');\r\n        });\r\n    }\r\n\r\n\r\n    /*\r\n    *Return child functions in a objects\r\n    */\r\n    return{\r\n        setHandleEvent: function(){\r\n            try { _MapEnableHome(); } catch (error) { console.log(error) }\r\n        },\r\n    }\r\n})();\r\n\r\n/*\r\n*Load global functions\r\n*/\r\nconst loadMapHandlers = ()=>{\r\n    Map.setHandleEvent();\r\n}\r\n\r\nexport { loadMapHandlers }","//COMPONENTS\r\nimport { loadMapHandlers } from \"./modules/MapLeaflet\";\r\nimport \"../sass/main.scss\";\r\n\r\nwindow.addEventListener('load', ()=>{\r\n    loadMapHandlers();\r\n});"],"names":["MapGeoJsonConect","url","__async","Map","_MapConfig","dinamicGeoJson","lat","lng","zoom","style","feature","population","getColor","map","geojsonLayer","infoControl","props","layer","name","e","_MapEnableHome","conectApi","geoJson","features","getData","properties","dataMap","arrayWithData","regionEndpoint","region_code_endpoint","dataProperties","region_code","createNewArr","err","error","loadMapHandlers"],"mappings":"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"}