{"version":3,"file":"mainscript.umd.cjs","sources":["../../sources/js/api/MapGeoJson.js","../../sources/js/modules/MapLeaflet.js","../../sources/js/front.js"],"sourcesContent":["const MapGeoJsonConect = async(url)=>{\r\n    const fetchGeoJson = await fetch(url);\r\n    const dataToJson = await fetchGeoJson.json();\r\n\r\n    return dataToJson;\r\n}\r\n\r\nexport default MapGeoJsonConect;","import conectApi from '../api/MapGeoJson';\n\nconst Map = (()=>{\n\n    const _MapConfig = async (dinamicGeoJson, lat = 0, lng = 0, zoom = 0)=>{\n\n        // Function for paint map\n        function style(feature) {\n            const { population } = feature.properties;\n            return {\n                fillColor: getColor(population),\n                weight: 1,\n                opacity: 1,\n                color: 'white',\n                dashArray: '1',\n                fillOpacity: 0.9\n            };\n        }\n\n        // Get color according to population\n        function getColor(population) {\n            return population > 60000000 ? '#800026' :\n                population > 50000000 ? '#BD0026' :\n                population > 40000000 ? '#002345' :\n                '#002345';\n        }\n\n        // Create map + coords + zoom\n        const map = L.map('map',{\n            center: [lat, lng],\n            zoom: zoom,\n            minZoom: 2 \n        }); // Coordenadas iniciales y nivel de zoom\n\n        // Add map cap\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(map);\n\n        // Add cap and aply styles\n        const geojsonLayer = await L.geoJson(dinamicGeoJson, { style }).addTo(map);\n\n        // Info control personality\n        const infoControl = await L.control();\n\n        //Create template\n        infoControl.onAdd = function(map) {\n            this._div = L.DomUtil.create('div', 'info-control');\n            this.update();\n            return this._div;\n        };\n\n        //Method for update info control\n        infoControl.update = function(props) {\n            this._div.innerHTML = props ?\n                `<strong>${props.ADMIN ? props.ADMIN : props.NOMBRE_DPT}</strong><br>Población:${props.population}` :\n                'Pasa el cursor sobre un área';\n        };\n\n        //Add to map info control\n        await infoControl.addTo(map);\n\n        // Add popups depending on the population of each country\n        geojsonLayer.eachLayer(function(layer) {\n            const { population, ADMIN, NOMBRE_DPT } = layer.feature.properties;   \n\n            //Update in real time data of countries\n            layer.on('mouseover', function(e) {\n                const props = e.target.feature.properties;\n                infoControl.update(props);\n            });\n            layer.on('mouseout', function() {\n                infoControl.update();\n            });\n\n            // Open popup\n            layer.bindPopup(`<strong>${ADMIN ? ADMIN : NOMBRE_DPT}</strong><br>Población:${population}`);\n        });\n    }\n\n    /*\n    *Enable map\n    */\n    const _MapEnableHome = ()=>{\n        const getLegend = document.querySelector('.map__legend');\n        conectApi('./lib/countries.geojson')\n            .then((data)=>{\n                getLegend.classList.add('active');\n                _MapConfig(data);\n            });\n    }\n\n\n    /*\n    *Return child functions in a objects\n    */\n    return{\n        setHandleEvent: function(){\n            try { _MapEnableHome(); } catch (error) { console.log(error) }\n        },\n    }\n})();\n\n/*\n*Load global functions\n*/\nconst loadMapHandlers = ()=>{\n    Map.setHandleEvent();\n}\n\nexport { loadMapHandlers }","//COMPONENTS\nimport { loadMapHandlers } from \"./modules/MapLeaflet\";\nimport \"../sass/main.scss\";\n\nwindow.addEventListener('load', ()=>{\n    loadMapHandlers();\n});"],"names":["MapGeoJsonConect","url","__async","Map","_MapConfig","dinamicGeoJson","lat","lng","zoom","style","feature","population","getColor","map","geojsonLayer","infoControl","props","layer","ADMIN","NOMBRE_DPT","e","_MapEnableHome","getLegend","conectApi","data","error","loadMapHandlers"],"mappings":"wSAAA,MAAMA,EAAyBC,GAAMC,EAAA,sBAIjC,OAFmB,MADE,MAAM,MAAMD,CAAG,GACE,MAG1C,GCHME,GAAO,IAAI,CAEb,MAAMC,EAAa,CAAOC,EAAgBC,EAAM,EAAGC,EAAM,EAAGC,EAAO,IAAIN,EAAA,sBAGnE,SAASO,EAAMC,EAAS,CACpB,KAAM,CAAE,WAAAC,CAAU,EAAKD,EAAQ,WAC/B,MAAO,CACH,UAAWE,EAASD,CAAU,EAC9B,OAAQ,EACR,QAAS,EACT,MAAO,QACP,UAAW,IACX,YAAa,EAC7B,CACS,CAGD,SAASC,EAASD,EAAY,CAC1B,OAAOA,EAAa,IAAW,UAC3BA,EAAa,IAAW,WACxBA,EAAa,IAAW,UAE/B,CAGD,MAAME,EAAM,EAAE,IAAI,MAAM,CACpB,OAAQ,CAACP,EAAKC,CAAG,EACjB,KAAMC,EACN,QAAS,CACrB,CAAS,EAGD,EAAE,UAAU,qDAAsD,CAC9D,YAAa,yFACzB,CAAS,EAAE,MAAMK,CAAG,EAGZ,MAAMC,EAAe,MAAM,EAAE,QAAQT,EAAgB,CAAE,MAAAI,EAAO,EAAE,MAAMI,CAAG,EAGnEE,EAAc,MAAM,EAAE,UAG5BA,EAAY,MAAQ,SAASF,EAAK,CAC9B,YAAK,KAAO,EAAE,QAAQ,OAAO,MAAO,cAAc,EAClD,KAAK,OAAM,EACJ,KAAK,IACxB,EAGQE,EAAY,OAAS,SAASC,EAAO,CACjC,KAAK,KAAK,UAAYA,EAClB,WAAWA,EAAM,MAAQA,EAAM,MAAQA,EAAM,uCAAoCA,EAAM,aACvF,iCAChB,EAGQ,MAAMD,EAAY,MAAMF,CAAG,EAG3BC,EAAa,UAAU,SAASG,EAAO,CACnC,KAAM,CAAE,WAAAN,EAAY,MAAAO,EAAO,WAAAC,CAAY,EAAGF,EAAM,QAAQ,WAGxDA,EAAM,GAAG,YAAa,SAASG,EAAG,CAC9B,MAAMJ,EAAQI,EAAE,OAAO,QAAQ,WAC/BL,EAAY,OAAOC,CAAK,CACxC,CAAa,EACDC,EAAM,GAAG,WAAY,UAAW,CAC5BF,EAAY,OAAM,CAClC,CAAa,EAGDE,EAAM,UAAU,WAAWC,GAAgBC,8BAAoCR,GAAY,CACvG,CAAS,CACJ,GAKKU,EAAiB,IAAI,CACvB,MAAMC,EAAY,SAAS,cAAc,cAAc,EACvDC,EAAU,yBAAyB,EAC9B,KAAMC,GAAO,CACVF,EAAU,UAAU,IAAI,QAAQ,EAChClB,EAAWoB,CAAI,CAC/B,CAAa,CACR,EAMD,MAAM,CACF,eAAgB,UAAU,CACtB,GAAI,CAAEH,EAAgB,QAAWI,EAAP,CAAgB,QAAQ,IAAIA,CAAK,CAAG,CACjE,CACJ,CACL,KAKMC,EAAkB,IAAI,CACxBvB,EAAI,eAAc,CACtB,OCxGA,OAAO,iBAAiB,OAAQ,IAAI,CAChCuB,GACJ,CAAC"}